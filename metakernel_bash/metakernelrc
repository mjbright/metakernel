
## ----------------------------------------
## Configuration:

CYGROOT="c:/tools/cygwin"

TMPDIR=/tmp/metakernel_bash_kernel

[ -z "$USER" ] && USER="unknown"

# Aliases don't work: alias reread_metakernelrc="source ${BASH_SOURCE[0]}"
function reread_metakernelrc { source ${BASH_SOURCE[0]}; }

## ----------------------------------------
## Startup:

#
# These get echoed if re-sourced from the notebook
#      source ~/.metakernelrc
MESSAGE="[$(date)] Sourcing <<${BASH_SOURCE[0]}>>"
echo $MESSAGE
#echo $MESSAGE >&2

[ ! -d $TMPDIR ] && mkdir -p $TMPDIR
echo $MESSAGE >> $TMPDIR/metakernelrc.${USER}.sourced

test_fn() {
    MESSAGE="[$(date)] Hello from test_fn() (declared in ${BASH_SOURCE[0]})"
    echo $MESSAGE
}


## ----------------------------------------
## User functions:

getinput_src() {
    TMPFILE_BASE="$1"; shift
    INPUT_SRC="$1"

    TMPFILE=$(mktemp ${TMPDIR}/${TMPFILE_BASE}.XXXXXX)

    echo "TMPFILE='$TMPFILE' INPUT_SRC='$INPUT_SRC'" >&2
    #[ ! -z "$1" ] && INPUT_SRC="$1"; shift;
    #[ ! -z "$1" ] && [ -f "$1" ] && { INPUT_SRC="$1"; shift; }

    if [ -z "$INPUT_SRC" ];then
        # No input file or url specified, so create file from stdin
        cat > $TMPFILE
    else
        case "$INPUT_SRC" in
            http:*)
                wget -O - $INPUT_SRC > $TMPFILE;
                ;;
            https:*)
                wget -O - $INPUT_SRC > $TMPFILE;
                ;;
            data:*)
                echo "$INPUT_SRC" > $TMPFILE;
                ;;
            *) cp $INPUT_SRC $TMPFILE;;
        esac
    fi
}

metakernel_magic() {
    MAGIC=$1; shift

    local _TEXT_SAVED=$(echo "metakernel_bash_kernel: saved EXTENSION(__MAGIC__) data to:" | sed "s/__MAGIC__/$MAGIC/")

    getinput_src $MAGIC $1

    echo "$_TEXT_SAVED $TMPFILE" >&2
}

# Metakernel magic definition functions:
display() { metakernel_magic 'image' $*; }
pydot  () { metakernel_magic 'pydot' $*; }
js     () { metakernel_magic 'js' $*; }
html   () { metakernel_magic 'html' $*; }
PYTHON () { metakernel_magic 'python' $*; }

USE_TEMPLATE() {
  echo "Invoked ${FUNCNAME[0]} $*" >&2
  TEMPLATE=$1; shift

  USE_TEMPLATE_LOG=/tmp/template.log

  # After call, data will be in file $TMPFILE:
  getinput_src "${FUNCNAME[0]}_${TEMPLATE}" "$1"

  # Copy TMPFILE to local ./tmp/
  [ ! -d tmp ] && mkdir -p tmp
  cp $TMPFILE ./tmp/
  TMPFILE=tmp/${TMPFILE##*/}
  echo "$TEMPLATE: data file=$TMPFILE" >> $USE_TEMPLATE_LOG

  local _SCRIPT=${CYGROOT}$TMPDIR/${FUNCNAME[0]}.script
  echo "_SCRIPT=$_SCRIPT" >> $USE_TEMPLATE_LOG

  SOURCE_FILE=${BASH_SOURCE[0]}
  
  TEMPLATE_FILE=${SOURCE_FILE%/*}/${TEMPLATE}

  echo "python_script $@ < $TEMPLATE_FILE >$_SCRIPT" >> $USE_TEMPLATE_LOG

  local _PYSCRIPT='import sys; text="".join( sys.stdin.readlines() ); text=text.replace("{","{{").replace("}","}}").replace("<<>>","{}"); print(text.format(*sys.argv[1:]), end="")'

  python -c "$_PYSCRIPT" "$@" < $TEMPLATE_FILE >$_SCRIPT 2>> $USE_TEMPLATE_LOG
  echo "python -c $_PYSCRIPT '$@' < $TEMPLATE_FILE >$_SCRIPT" >> $USE_TEMPLATE_LOG
#  python -c '
#import sys
#
#text="".join( sys.stdin.readlines() )
#print(text.format(*sys.argv[1:]), end="")
#' "$@" < $TEMPLATE_FILE >$_SCRIPT 2>> $USE_TEMPLATE_LOG

  ls -altr $TEMPLATE_FILE $_SCRIPT >> $USE_TEMPLATE_LOG
  cat $_SCRIPT >> $USE_TEMPLATE_LOG

  cat $_SCRIPT |& tee $TMPDIR/${FUNCNAME[0]}.stdout
}



